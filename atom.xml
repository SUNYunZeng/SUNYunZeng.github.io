<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孙云增的博客</title>
  
  
  <link href="/SUNYunZeng.github.io/atom.xml" rel="self"/>
  
  <link href="/SUNYunZeng.github.io/"/>
  <updated>2019-04-25T10:02:59.455Z</updated>
  <id>/SUNYunZeng.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows环境下Hexo+Github搭建个人博客教程</title>
    <link href="/SUNYunZeng.github.io/2019/04/23/My%20first%20blog/"/>
    <id>/SUNYunZeng.github.io/2019/04/23/My first blog/</id>
    <published>2019-04-23T06:49:36.000Z</published>
    <updated>2019-04-25T10:02:59.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>你是否也想拥有属于自己的博客？是否也想拥有跟我一样的博客空间？如果心动了，就赶紧往下看吧！</strong></p><blockquote><p>教程炒鸡简单，炒鸡详细，而且博客搭建完全是<strong>Free of Charge!</strong></p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h4 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h4><p><strong><a href="https://github.com/" target="_blank" rel="noopener">Github</a></strong>不仅可以让我们把代码托管在平台上，而且允许我们<strong>利用Github的服务器部署自定义网页</strong>对我们的项目作简介。这个网页就被称为**</p><p>Github Pages**。这是我们可以利用Github搭建免费博客的基础啦~</p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p><strong><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></strong>是一款轻量但高逼格的搭建博客快速工具，它是基于<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>开发的。而Node.js…好了，扯远了…有兴趣的童鞋可以出门左转自己百度…</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>知道了大致的原理，我们首先需要准备搭建博客的材料。如下：</p><p><strong><em>1. 一台windows系统的电脑</em><br><em>2. 一个Github账号</em><br><em>3. 安装Node.js</em><br><em>4. 安装Git</em><br><em>5. 安装Hexo</em></strong></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-申请Github账号，建立一个仓库，并为此创建一个说明网页-Github-Pages"><a href="#1-申请Github账号，建立一个仓库，并为此创建一个说明网页-Github-Pages" class="headerlink" title="1. 申请Github账号，建立一个仓库，并为此创建一个说明网页(Github Pages)"></a>1. 申请Github账号，建立一个仓库，并为此创建一个说明网页(Github Pages)</h3><p>假设我们都有了Github账号，这是首先在右上角点击“+”号，选择<strong>New repository</strong><br><img src="img/new_repository.png" alt="添加新仓库"></p><p><strong>注意  仓库名一定是”你的Github用户名”+github.io !!!</strong></p><p><img src="img/name_repository.png" alt="添加新仓库"></p><p>之后为我们的项目添加一个<strong>说明Pages</strong>！</p><p>建好的项目顶部最右边有个<strong>Setting</strong>按钮，点击进入配置界面，下滑界面，直到看到<strong>Github Pages</strong>，这时你发现竟然自动生成了一个说明网页！</p><p>因为Github说明网页的默认地址就是“你的Github用户名”+github.io，其它说明网页都是基于该地址的。<br><img src="img/setting_repository.png" alt="添加新仓库"></p><p><img src="img/pages_repository.png" alt="添加新仓库"></p><p><strong>Ok!</strong> 到此为止，Gihub Pages的部分就结束了。</p><h3 id="2-搭建Hexo，把Github-Pages修改为自己的博客界面！"><a href="#2-搭建Hexo，把Github-Pages修改为自己的博客界面！" class="headerlink" title="2. 搭建Hexo，把Github Pages修改为自己的博客界面！"></a>2. 搭建Hexo，把Github Pages修改为自己的博客界面！</h3><h4 id="1-安装Git以及Node-js！"><a href="#1-安装Git以及Node-js！" class="headerlink" title="1. 安装Git以及Node.js！"></a>1. 安装Git以及Node.js！</h4><p>因为我们需要通过Git把我们的Hexo生成的网页提交到Github pages上，而Node.js是我们Hexo插件运行的基础！</p><ol><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载安装Windows版Git</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">下载安装Node.js</a></li></ol><p><strong>验证：</strong><br>“Win”+R打开运行界面，输入”cmd”打开命令行窗口。<br>是否安装Git:输入<code>git version</code>出现版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 2.19.1.windows.1</span><br></pre></td></tr></table></figure><p>是否安装Node.js:输入<code>node -v</code>出现版本信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v8.12.0</span><br></pre></td></tr></table></figure></p><h4 id="2-安装及部署Hexo"><a href="#2-安装及部署Hexo" class="headerlink" title="2. 安装及部署Hexo"></a>2. 安装及部署Hexo</h4><p>首先<strong>创建一个文件夹</strong>，用来放置我们的Hexo。</p><p>然后进入我们的文件夹，例如我们文件夹路径为D:\blog</p><p>则在终端依次输入并执行<code>D:</code> 、 <code>cd blog</code> 进入文件夹</p><p>打开命令终端，利用Node.js的包管理器npm<strong>安装Hexo</strong>:<br><code>npm install hexo-cli -g</code><br>输入<code>hexo -v</code>验证是否安装成功<br>输入<code>hexo init</code>初始化该文件夹<br>输入<code>npm install</code>安装需要的组件<br>输入<code>npm g</code>生成静态文件<br>输入<code>npm s</code>启动服务器，现在在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>打开我们的博客界面！</p><p>是不是有点鸡冻！别急，我们还需要把页面推送到Github Pages上，步骤如下：</p><p><strong>1. 设置Git的user name和email</strong></p><p>在我们创建博客文件夹里右击，选择 Git Base Here，然后在窗口中依次输入<br><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code></p><p><strong>2. SSH 授权</strong><br>打开git bash，输入<code>ssh-keygen -t rsa</code>, 接着回车三下。</p><p>最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）</p><p>登录Github，点击头像下的settings，添加ssh。新建一个new ssh key，将<strong>id_rsa.pub</strong>文件里的内容复制上去<br><img src="img/ssh.png" alt="添加SSH"><br><strong>3. 上传项目</strong></p><p>首先用IDE(我用的是WebStorm)打开我们的Hexo文件夹，发现它的文档目录是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml</span><br><span class="line">|-- package.json</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- source</span><br><span class="line">   |-- _posts</span><br><span class="line">|-- public</span><br><span class="line">|-- themes</span><br><span class="line">|-- .gitignore</span><br></pre></td></tr></table></figure></p><blockquote><p>_config.yml：网站的全局配置文件，设置包括网站标题、副标题、作者、关键字和描述信息等。</p></blockquote><blockquote><p>package.json：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 –save 保存进去。</p></blockquote><blockquote><p>scaffolds：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new &lt;layout(布局)&gt; <title> 的时候，Hexo 会根据该文件夹下<br>的对应文件进行初始化构建。</title></p></blockquote><blockquote><p>source：正如其名，source 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下(_posts)。_posts 目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。</p></blockquote><blockquote><p>public：参考 source 文件夹，在初始化后是没有 public 文件夹的，除非 hexo g 编译生成静态文件后，public 文件夹会自动生成。使用<br>hexo clean 清除 db.json 和 public 文件夹下的所有文件。</p></blockquote><blockquote><p>themes：主题文件夹，存储主题。相关的主题可以在 Github 上免费采购。</p></blockquote><blockquote><p>.gitignore：.gitignore 文件作用是声明不被 git 记录的文件，hexo init <folder> 也会产生一个 .gitignore 文件，可以先删除或者直接编辑，对hexo不会有影响。</folder></p></blockquote><p><strong>打开配置文档_config.yml，修改deploy值（在末尾）:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:SUNYunZeng/SUNYunZeng.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;你是否也想拥有属于自己的博客？是否也想拥有跟我一样的博客空间？如果心动了，就赶紧往下看吧！&lt;/strong&gt;&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
      <category term="教程" scheme="/SUNYunZeng.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="网页" scheme="/SUNYunZeng.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
</feed>
